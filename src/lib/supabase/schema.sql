-- Masa kategorileri tablosu
CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    company_id BIGINT REFERENCES companies(id),
    branch_id BIGINT REFERENCES branches(id)
);

-- Masalar tablosu
CREATE TABLE IF NOT EXISTS tables (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    number INTEGER NOT NULL,
    capacity INTEGER NOT NULL DEFAULT 4,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    is_online_reservable BOOLEAN NOT NULL DEFAULT true,
    category_id BIGINT REFERENCES categories(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    company_id BIGINT REFERENCES companies(id),
    branch_id BIGINT REFERENCES branches(id)
);

-- Rezervasyonlar tablosu
CREATE TABLE IF NOT EXISTS reservations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_id BIGINT REFERENCES tables(id),
    customer_name VARCHAR(255) NOT NULL,
    customer_phone VARCHAR(20),
    customer_email VARCHAR(255),
    guest_count INTEGER NOT NULL DEFAULT 1,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'confirmed' CHECK (status IN ('confirmed', 'pending', 'cancelled', 'completed')),
    note TEXT,
    payment_status VARCHAR(20) DEFAULT 'unpaid' CHECK (payment_status IN ('unpaid', 'partial', 'paid')),
    color VARCHAR(20),
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    company_id BIGINT REFERENCES companies(id),
    branch_id BIGINT REFERENCES branches(id)
);

-- Firmalar tablosu
CREATE TABLE IF NOT EXISTS companies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Şubeler tablosu
CREATE TABLE IF NOT EXISTS branches (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_id BIGINT REFERENCES companies(id),
    name VARCHAR(255) NOT NULL,
    address TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Kullanıcı rolleri tablosu
CREATE TABLE IF NOT EXISTS user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Kullanıcılar tablosu (Supabase auth ile entegre)
CREATE TABLE IF NOT EXISTS users (
    id UUID REFERENCES auth.users(id) PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    full_name VARCHAR(255),
    role_id BIGINT REFERENCES user_roles(id),
    company_id BIGINT REFERENCES companies(id),
    branch_id BIGINT REFERENCES branches(id),
    is_super_admin BOOLEAN DEFAULT false,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Sistem logları tablosu
CREATE TABLE IF NOT EXISTS system_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES users(id),
    company_id BIGINT REFERENCES companies(id),
    branch_id BIGINT REFERENCES branches(id),
    action VARCHAR(255) NOT NULL,
    details JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Trigger fonksiyonu - updated_at alanını güncellemek için
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc', NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger'ları oluştur
CREATE TRIGGER update_categories_updated_at
    BEFORE UPDATE ON categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tables_updated_at
    BEFORE UPDATE ON tables
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_reservations_updated_at
    BEFORE UPDATE ON reservations
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_companies_updated_at
    BEFORE UPDATE ON companies
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_branches_updated_at
    BEFORE UPDATE ON branches
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- RLS (Row Level Security) Politikaları
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE tables ENABLE ROW LEVEL SECURITY;
ALTER TABLE reservations ENABLE ROW LEVEL SECURITY;
ALTER TABLE companies ENABLE ROW LEVEL SECURITY;
ALTER TABLE branches ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_logs ENABLE ROW LEVEL SECURITY;

-- Herkes okuyabilir
CREATE POLICY "Herkes kategorileri görebilir" ON categories
    FOR SELECT USING (true);

CREATE POLICY "Herkes masaları görebilir" ON tables
    FOR SELECT USING (true);

CREATE POLICY "Yetkililer rezervasyonları görebilir" ON reservations
    FOR SELECT USING (auth.role() IS NOT NULL);

-- Sadece yetkililer düzenleyebilir (auth.role() = 'admin' olarak değiştirilebilir)
CREATE POLICY "Yetkililer kategori ekleyebilir" ON categories
    FOR INSERT WITH CHECK (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer kategori düzenleyebilir" ON categories
    FOR UPDATE USING (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer kategori silebilir" ON categories
    FOR DELETE USING (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer masa ekleyebilir" ON tables
    FOR INSERT WITH CHECK (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer masa düzenleyebilir" ON tables
    FOR UPDATE USING (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer masa silebilir" ON tables
    FOR DELETE USING (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer rezervasyon ekleyebilir" ON reservations
    FOR INSERT WITH CHECK (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer rezervasyon düzenleyebilir" ON reservations
    FOR UPDATE USING (auth.role() IS NOT NULL);

CREATE POLICY "Yetkililer rezervasyon silebilir" ON reservations
    FOR DELETE USING (auth.role() IS NOT NULL);

-- Süper admin tüm verileri görebilir ve düzenleyebilir
CREATE POLICY "Süper admin her şeyi yapabilir" ON companies
    FOR ALL USING (auth.jwt() ->> 'is_super_admin' = 'true');

CREATE POLICY "Süper admin her şeyi yapabilir" ON branches
    FOR ALL USING (auth.jwt() ->> 'is_super_admin' = 'true');

-- Firma yöneticileri kendi firmalarının verilerini görebilir
CREATE POLICY "Firma yöneticileri kendi verilerini görebilir" ON companies
    FOR SELECT USING (
        auth.uid() IN (
            SELECT id FROM users 
            WHERE company_id = companies.id AND role_id = (SELECT id FROM user_roles WHERE name = 'company_admin')
        )
    );

CREATE POLICY "Firma yöneticileri kendi şubelerini görebilir" ON branches
    FOR SELECT USING (
        auth.uid() IN (
            SELECT id FROM users 
            WHERE company_id = branches.company_id AND role_id = (SELECT id FROM user_roles WHERE name = 'company_admin')
        )
    );

-- Şube yöneticileri kendi şubelerinin verilerini görebilir
CREATE POLICY "Şube yöneticileri kendi verilerini görebilir" ON branches
    FOR SELECT USING (
        auth.uid() IN (
            SELECT id FROM users 
            WHERE branch_id = branches.id AND role_id = (SELECT id FROM user_roles WHERE name = 'branch_admin')
        )
    );

-- Örnek kategori verileri
INSERT INTO categories (name, status) VALUES
    ('Teras', 'active'),
    ('Bahçe', 'active'),
    ('İç Mekan', 'active')
ON CONFLICT DO NOTHING;

-- Örnek masa verileri
INSERT INTO tables (number, capacity, status, is_online_reservable, category_id) 
SELECT 1, 4, 'active', true, id FROM categories WHERE name = 'Teras'
ON CONFLICT DO NOTHING;

INSERT INTO tables (number, capacity, status, is_online_reservable, category_id)
SELECT 2, 6, 'active', true, id FROM categories WHERE name = 'Bahçe'
ON CONFLICT DO NOTHING;

INSERT INTO tables (number, capacity, status, is_online_reservable, category_id)
SELECT 3, 2, 'active', false, id FROM categories WHERE name = 'İç Mekan'
ON CONFLICT DO NOTHING;

-- Örnek firma
INSERT INTO companies (name, status) VALUES
    ('Demo Firma', 'active')
ON CONFLICT DO NOTHING;

-- Örnek şube
INSERT INTO branches (company_id, name, status) 
SELECT id, 'Merkez Şube', 'active' 
FROM companies 
WHERE name = 'Demo Firma'
ON CONFLICT DO NOTHING;

-- Örnek kullanıcı rolleri
INSERT INTO user_roles (name) VALUES
    ('super_admin'),
    ('company_admin'),
    ('branch_admin'),
    ('staff')
ON CONFLICT DO NOTHING;

-- Örnek kullanıcılar
INSERT INTO users (id, email, full_name, role_id, company_id, branch_id, is_super_admin, status)
SELECT '00000000-0000-0000-0000-000000000000', 'superadmin@example.com', 'Super Admin', id, id, id, true, 'active'
FROM user_roles WHERE name = 'super_admin'
ON CONFLICT DO NOTHING;

INSERT INTO users (id, email, full_name, role_id, company_id, branch_id, is_super_admin, status)
SELECT '11111111-1111-1111-1111-111111111111', 'companyadmin@example.com', 'Company Admin', id, id, id, false, 'active'
FROM user_roles WHERE name = 'company_admin'
ON CONFLICT DO NOTHING;

INSERT INTO users (id, email, full_name, role_id, company_id, branch_id, is_super_admin, status)
SELECT '22222222-2222-2222-2222-222222222222', 'branchadmin@example.com', 'Branch Admin', id, id, id, false, 'active'
FROM user_roles WHERE name = 'branch_admin'
ON CONFLICT DO NOTHING;

INSERT INTO users (id, email, full_name, role_id, company_id, branch_id, is_super_admin, status)
SELECT '33333333-3333-3333-3333-333333333333', 'staff@example.com', 'Staff', id, id, id, false, 'active'
FROM user_roles WHERE name = 'staff'
ON CONFLICT DO NOTHING;

-- Örnek rezervasyon verileri
INSERT INTO reservations (table_id, customer_name, customer_phone, guest_count, start_time, end_time, status, note)
SELECT 
    id, 
    'Ahmet Yılmaz', 
    '5551234567', 
    4, 
    TIMEZONE('utc', NOW() + INTERVAL '1 DAY' + INTERVAL '18 HOUR'), 
    TIMEZONE('utc', NOW() + INTERVAL '1 DAY' + INTERVAL '20 HOUR'), 
    'confirmed', 
    'Doğum günü kutlaması'
FROM tables 
WHERE number = 1
LIMIT 1
ON CONFLICT DO NOTHING;

INSERT INTO reservations (table_id, customer_name, customer_phone, guest_count, start_time, end_time, status)
SELECT 
    id, 
    'Ayşe Demir', 
    '5559876543', 
    2, 
    TIMEZONE('utc', NOW() + INTERVAL '2 DAY' + INTERVAL '19 HOUR'), 
    TIMEZONE('utc', NOW() + INTERVAL '2 DAY' + INTERVAL '21 HOUR'), 
    'confirmed'
FROM tables 
WHERE number = 3
LIMIT 1
ON CONFLICT DO NOTHING; 